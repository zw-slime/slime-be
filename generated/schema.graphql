### This file was autogenerated by Nexus 0.11.7
### Do not make changes to this file directly


type AggregatePost {
  count: Int!
}

type AggregateRole {
  count: Int!
}

type AggregateType {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createPost(data: PostCreateInput!): Post!
  createRole(data: RoleCreateInput!): Role!
  createType(data: TypeCreateInput!): Type!
  createUser(data: UserCreateInput!): User!
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  deleteManyRoles(where: RoleWhereInput): BatchPayload!
  deleteManyTypes(where: TypeWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteType(where: TypeWhereUniqueInput!): Type
  deleteUser(where: UserWhereUniqueInput!): User
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  updateManyRoles(data: RoleUpdateManyMutationInput!, where: RoleWhereInput): BatchPayload!
  updateManyTypes(data: TypeUpdateManyMutationInput!, where: TypeWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateRole(data: RoleUpdateInput!, where: RoleWhereUniqueInput!): Role
  updateType(data: TypeUpdateInput!, where: TypeWhereUniqueInput!): Type
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertPost(create: PostCreateInput!, update: PostUpdateInput!, where: PostWhereUniqueInput!): Post!
  upsertRole(create: RoleCreateInput!, update: RoleUpdateInput!, where: RoleWhereUniqueInput!): Role!
  upsertType(create: TypeCreateInput!, update: TypeUpdateInput!, where: TypeWhereUniqueInput!): Type!
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Post {
  author: User
  content: String
  createdAt: DateTime!
  id: ID!
  public: Boolean!
  title: String!
  type: Type!
  updatedAt: DateTime!
}

type PostConnection {
  aggregate: AggregatePost!
  edges: [PostEdge!]!
  pageInfo: PageInfo!
}

input PostCreateInput {
  author: UserCreateOneWithoutPostsInput
  content: String
  id: ID
  public: Boolean
  title: String!
  type: TypeCreateOneWithoutPostsInput!
}

input PostCreateManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutAuthorInput!]
}

input PostCreateManyWithoutTypeInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutTypeInput!]
}

input PostCreateWithoutAuthorInput {
  content: String
  id: ID
  public: Boolean
  title: String!
  type: TypeCreateOneWithoutPostsInput!
}

input PostCreateWithoutTypeInput {
  author: UserCreateOneWithoutPostsInput
  content: String
  id: ID
  public: Boolean
  title: String!
}

type PostEdge {
  cursor: String!
  node: Post!
}

enum PostOrderByInput {
  content_ASC
  content_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  public_ASC
  public_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input PostScalarWhereInput {
  AND: [PostScalarWhereInput!]
  content: String
  content_contains: String
  content_ends_with: String
  content_gt: String
  content_gte: String
  content_in: [String!]
  content_lt: String
  content_lte: String
  content_not: String
  content_not_contains: String
  content_not_ends_with: String
  content_not_in: [String!]
  content_not_starts_with: String
  content_starts_with: String
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  public: Boolean
  public_not: Boolean
  title: String
  title_contains: String
  title_ends_with: String
  title_gt: String
  title_gte: String
  title_in: [String!]
  title_lt: String
  title_lte: String
  title_not: String
  title_not_contains: String
  title_not_ends_with: String
  title_not_in: [String!]
  title_not_starts_with: String
  title_starts_with: String
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input PostUpdateInput {
  author: UserUpdateOneWithoutPostsInput
  content: String
  public: Boolean
  title: String
  type: TypeUpdateOneRequiredWithoutPostsInput
}

input PostUpdateManyDataInput {
  content: String
  public: Boolean
  title: String
}

input PostUpdateManyMutationInput {
  content: String
  public: Boolean
  title: String
}

input PostUpdateManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutAuthorInput!]
  delete: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
}

input PostUpdateManyWithoutTypeInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutTypeInput!]
  delete: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutTypeInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutTypeInput!]
}

input PostUpdateManyWithWhereNestedInput {
  data: PostUpdateManyDataInput!
  where: PostScalarWhereInput!
}

input PostUpdateWithoutAuthorDataInput {
  content: String
  public: Boolean
  title: String
  type: TypeUpdateOneRequiredWithoutPostsInput
}

input PostUpdateWithoutTypeDataInput {
  author: UserUpdateOneWithoutPostsInput
  content: String
  public: Boolean
  title: String
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  data: PostUpdateWithoutAuthorDataInput!
  where: PostWhereUniqueInput!
}

input PostUpdateWithWhereUniqueWithoutTypeInput {
  data: PostUpdateWithoutTypeDataInput!
  where: PostWhereUniqueInput!
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  create: PostCreateWithoutAuthorInput!
  update: PostUpdateWithoutAuthorDataInput!
  where: PostWhereUniqueInput!
}

input PostUpsertWithWhereUniqueWithoutTypeInput {
  create: PostCreateWithoutTypeInput!
  update: PostUpdateWithoutTypeDataInput!
  where: PostWhereUniqueInput!
}

input PostWhereInput {
  AND: [PostWhereInput!]
  author: UserWhereInput
  content: String
  content_contains: String
  content_ends_with: String
  content_gt: String
  content_gte: String
  content_in: [String!]
  content_lt: String
  content_lte: String
  content_not: String
  content_not_contains: String
  content_not_ends_with: String
  content_not_in: [String!]
  content_not_starts_with: String
  content_starts_with: String
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  public: Boolean
  public_not: Boolean
  title: String
  title_contains: String
  title_ends_with: String
  title_gt: String
  title_gte: String
  title_in: [String!]
  title_lt: String
  title_lte: String
  title_not: String
  title_not_contains: String
  title_not_ends_with: String
  title_not_in: [String!]
  title_not_starts_with: String
  title_starts_with: String
  type: TypeWhereInput
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  post(where: PostWhereUniqueInput!): Post
  posts(after: String, before: String, first: Int, last: Int, orderBy: PostOrderByInput, skip: Int, where: PostWhereInput): [Post!]!
  postsConnection(after: String, before: String, first: Int, last: Int, orderBy: PostOrderByInput, skip: Int, where: PostWhereInput): PostConnection!
  role(where: RoleWhereUniqueInput!): Role
  roles(after: String, before: String, first: Int, last: Int, orderBy: RoleOrderByInput, skip: Int, where: RoleWhereInput): [Role!]!
  rolesConnection(after: String, before: String, first: Int, last: Int, orderBy: RoleOrderByInput, skip: Int, where: RoleWhereInput): RoleConnection!
  type(where: TypeWhereUniqueInput!): Type
  types(after: String, before: String, first: Int, last: Int, orderBy: TypeOrderByInput, skip: Int, where: TypeWhereInput): [Type!]!
  typesConnection(after: String, before: String, first: Int, last: Int, orderBy: TypeOrderByInput, skip: Int, where: TypeWhereInput): TypeConnection!
  user(where: UserWhereUniqueInput!): User
  users(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]!
  usersConnection(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): UserConnection!
}

type Role {
  createAt: DateTime!
  id: ID!
  name: String!
  updateAt: DateTime!
  users(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]
}

type RoleConnection {
  aggregate: AggregateRole!
  edges: [RoleEdge!]!
  pageInfo: PageInfo!
}

input RoleCreateInput {
  createAt: DateTime!
  id: ID
  name: String!
  updateAt: DateTime!
  users: UserCreateManyWithoutRoleInput
}

input RoleCreateOneWithoutUsersInput {
  connect: RoleWhereUniqueInput
  create: RoleCreateWithoutUsersInput
}

input RoleCreateWithoutUsersInput {
  createAt: DateTime!
  id: ID
  name: String!
  updateAt: DateTime!
}

type RoleEdge {
  cursor: String!
  node: Role!
}

enum RoleOrderByInput {
  createAt_ASC
  createAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updateAt_ASC
  updateAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input RoleUpdateInput {
  createAt: DateTime
  name: String
  updateAt: DateTime
  users: UserUpdateManyWithoutRoleInput
}

input RoleUpdateManyMutationInput {
  createAt: DateTime
  name: String
  updateAt: DateTime
}

input RoleUpdateOneRequiredWithoutUsersInput {
  connect: RoleWhereUniqueInput
  create: RoleCreateWithoutUsersInput
  update: RoleUpdateWithoutUsersDataInput
  upsert: RoleUpsertWithoutUsersInput
}

input RoleUpdateWithoutUsersDataInput {
  createAt: DateTime
  name: String
  updateAt: DateTime
}

input RoleUpsertWithoutUsersInput {
  create: RoleCreateWithoutUsersInput!
  update: RoleUpdateWithoutUsersDataInput!
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  createAt: DateTime
  createAt_gt: DateTime
  createAt_gte: DateTime
  createAt_in: [DateTime!]
  createAt_lt: DateTime
  createAt_lte: DateTime
  createAt_not: DateTime
  createAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  updateAt: DateTime
  updateAt_gt: DateTime
  updateAt_gte: DateTime
  updateAt_in: [DateTime!]
  updateAt_lt: DateTime
  updateAt_lte: DateTime
  updateAt_not: DateTime
  updateAt_not_in: [DateTime!]
  users_every: UserWhereInput
  users_none: UserWhereInput
  users_some: UserWhereInput
}

input RoleWhereUniqueInput {
  id: ID
  name: String
}

type Type {
  createAt: DateTime!
  id: ID!
  name: String!
  posts(after: String, before: String, first: Int, last: Int, orderBy: PostOrderByInput, skip: Int, where: PostWhereInput): [Post!]
  updateAt: DateTime!
}

type TypeConnection {
  aggregate: AggregateType!
  edges: [TypeEdge!]!
  pageInfo: PageInfo!
}

input TypeCreateInput {
  createAt: DateTime!
  id: ID
  name: String!
  posts: PostCreateManyWithoutTypeInput
  updateAt: DateTime!
}

input TypeCreateOneWithoutPostsInput {
  connect: TypeWhereUniqueInput
  create: TypeCreateWithoutPostsInput
}

input TypeCreateWithoutPostsInput {
  createAt: DateTime!
  id: ID
  name: String!
  updateAt: DateTime!
}

type TypeEdge {
  cursor: String!
  node: Type!
}

enum TypeOrderByInput {
  createAt_ASC
  createAt_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updateAt_ASC
  updateAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input TypeUpdateInput {
  createAt: DateTime
  name: String
  posts: PostUpdateManyWithoutTypeInput
  updateAt: DateTime
}

input TypeUpdateManyMutationInput {
  createAt: DateTime
  name: String
  updateAt: DateTime
}

input TypeUpdateOneRequiredWithoutPostsInput {
  connect: TypeWhereUniqueInput
  create: TypeCreateWithoutPostsInput
  update: TypeUpdateWithoutPostsDataInput
  upsert: TypeUpsertWithoutPostsInput
}

input TypeUpdateWithoutPostsDataInput {
  createAt: DateTime
  name: String
  updateAt: DateTime
}

input TypeUpsertWithoutPostsInput {
  create: TypeCreateWithoutPostsInput!
  update: TypeUpdateWithoutPostsDataInput!
}

input TypeWhereInput {
  AND: [TypeWhereInput!]
  createAt: DateTime
  createAt_gt: DateTime
  createAt_gte: DateTime
  createAt_in: [DateTime!]
  createAt_lt: DateTime
  createAt_lte: DateTime
  createAt_not: DateTime
  createAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [TypeWhereInput!]
  OR: [TypeWhereInput!]
  posts_every: PostWhereInput
  posts_none: PostWhereInput
  posts_some: PostWhereInput
  updateAt: DateTime
  updateAt_gt: DateTime
  updateAt_gte: DateTime
  updateAt_in: [DateTime!]
  updateAt_lt: DateTime
  updateAt_lte: DateTime
  updateAt_not: DateTime
  updateAt_not_in: [DateTime!]
}

input TypeWhereUniqueInput {
  id: ID
  name: String
}

type User {
  createdAt: DateTime!
  email: String!
  id: ID!
  password: String!
  posts(after: String, before: String, first: Int, last: Int, orderBy: PostOrderByInput, skip: Int, where: PostWhereInput): [Post!]
  role: Role!
  updatedAt: DateTime!
  username: String!
}

type UserConnection {
  aggregate: AggregateUser!
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

input UserCreateInput {
  email: String!
  id: ID
  password: String!
  posts: PostCreateManyWithoutAuthorInput
  role: RoleCreateOneWithoutUsersInput!
  username: String!
}

input UserCreateManyWithoutRoleInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutRoleInput!]
}

input UserCreateOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPostsInput
}

input UserCreateWithoutPostsInput {
  email: String!
  id: ID
  password: String!
  role: RoleCreateOneWithoutUsersInput!
  username: String!
}

input UserCreateWithoutRoleInput {
  email: String!
  id: ID
  password: String!
  posts: PostCreateManyWithoutAuthorInput
  username: String!
}

type UserEdge {
  cursor: String!
  node: User!
}

enum UserOrderByInput {
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  id_ASC
  id_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  username_ASC
  username_DESC
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  email: String
  email_contains: String
  email_ends_with: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  password: String
  password_contains: String
  password_ends_with: String
  password_gt: String
  password_gte: String
  password_in: [String!]
  password_lt: String
  password_lte: String
  password_not: String
  password_not_contains: String
  password_not_ends_with: String
  password_not_in: [String!]
  password_not_starts_with: String
  password_starts_with: String
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
  username: String
  username_contains: String
  username_ends_with: String
  username_gt: String
  username_gte: String
  username_in: [String!]
  username_lt: String
  username_lte: String
  username_not: String
  username_not_contains: String
  username_not_ends_with: String
  username_not_in: [String!]
  username_not_starts_with: String
  username_starts_with: String
}

input UserUpdateInput {
  email: String
  password: String
  posts: PostUpdateManyWithoutAuthorInput
  role: RoleUpdateOneRequiredWithoutUsersInput
  username: String
}

input UserUpdateManyDataInput {
  email: String
  password: String
  username: String
}

input UserUpdateManyMutationInput {
  email: String
  password: String
  username: String
}

input UserUpdateManyWithoutRoleInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutRoleInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutRoleInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutRoleInput!]
}

input UserUpdateManyWithWhereNestedInput {
  data: UserUpdateManyDataInput!
  where: UserScalarWhereInput!
}

input UserUpdateOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPostsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateWithoutPostsDataInput {
  email: String
  password: String
  role: RoleUpdateOneRequiredWithoutUsersInput
  username: String
}

input UserUpdateWithoutRoleDataInput {
  email: String
  password: String
  posts: PostUpdateManyWithoutAuthorInput
  username: String
}

input UserUpdateWithWhereUniqueWithoutRoleInput {
  data: UserUpdateWithoutRoleDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithoutPostsInput {
  create: UserCreateWithoutPostsInput!
  update: UserUpdateWithoutPostsDataInput!
}

input UserUpsertWithWhereUniqueWithoutRoleInput {
  create: UserCreateWithoutRoleInput!
  update: UserUpdateWithoutRoleDataInput!
  where: UserWhereUniqueInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  email: String
  email_contains: String
  email_ends_with: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: String
  password_contains: String
  password_ends_with: String
  password_gt: String
  password_gte: String
  password_in: [String!]
  password_lt: String
  password_lte: String
  password_not: String
  password_not_contains: String
  password_not_ends_with: String
  password_not_in: [String!]
  password_not_starts_with: String
  password_starts_with: String
  posts_every: PostWhereInput
  posts_none: PostWhereInput
  posts_some: PostWhereInput
  role: RoleWhereInput
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
  username: String
  username_contains: String
  username_ends_with: String
  username_gt: String
  username_gte: String
  username_in: [String!]
  username_lt: String
  username_lte: String
  username_not: String
  username_not_contains: String
  username_not_ends_with: String
  username_not_in: [String!]
  username_not_starts_with: String
  username_starts_with: String
}

input UserWhereUniqueInput {
  email: String
  id: ID
  username: String
}
