/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      User: UserObject
      Role: RoleObject
      Post: PostObject
      Type: TypeObject
      UserConnection: UserConnectionObject
      PageInfo: PageInfoObject
      UserEdge: UserEdgeObject
      AggregateUser: AggregateUserObject
      PostConnection: PostConnectionObject
      PostEdge: PostEdgeObject
      AggregatePost: AggregatePostObject
      RoleConnection: RoleConnectionObject
      RoleEdge: RoleEdgeObject
      AggregateRole: AggregateRoleObject
      TypeConnection: TypeConnectionObject
      TypeEdge: TypeEdgeObject
      AggregateType: AggregateTypeObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      UserSubscriptionPayload: UserSubscriptionPayloadObject
      UserPreviousValues: UserPreviousValuesObject
      PostSubscriptionPayload: PostSubscriptionPayloadObject
      PostPreviousValues: PostPreviousValuesObject
      RoleSubscriptionPayload: RoleSubscriptionPayloadObject
      RolePreviousValues: RolePreviousValuesObject
      TypeSubscriptionPayload: TypeSubscriptionPayloadObject
      TypePreviousValues: TypePreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      User: UserFieldDetails
      Role: RoleFieldDetails
      Post: PostFieldDetails
      Type: TypeFieldDetails
      UserConnection: UserConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      UserEdge: UserEdgeFieldDetails
      AggregateUser: AggregateUserFieldDetails
      PostConnection: PostConnectionFieldDetails
      PostEdge: PostEdgeFieldDetails
      AggregatePost: AggregatePostFieldDetails
      RoleConnection: RoleConnectionFieldDetails
      RoleEdge: RoleEdgeFieldDetails
      AggregateRole: AggregateRoleFieldDetails
      TypeConnection: TypeConnectionFieldDetails
      TypeEdge: TypeEdgeFieldDetails
      AggregateType: AggregateTypeFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      UserSubscriptionPayload: UserSubscriptionPayloadFieldDetails
      UserPreviousValues: UserPreviousValuesFieldDetails
      PostSubscriptionPayload: PostSubscriptionPayloadFieldDetails
      PostPreviousValues: PostPreviousValuesFieldDetails
      RoleSubscriptionPayload: RoleSubscriptionPayloadFieldDetails
      RolePreviousValues: RolePreviousValuesFieldDetails
      TypeSubscriptionPayload: TypeSubscriptionPayloadFieldDetails
      TypePreviousValues: TypePreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      UserWhereUniqueInput: UserWhereUniqueInputInputObject
      UserWhereInput: UserWhereInputInputObject
      RoleWhereInput: RoleWhereInputInputObject
      PostWhereInput: PostWhereInputInputObject
      TypeWhereInput: TypeWhereInputInputObject
      PostWhereUniqueInput: PostWhereUniqueInputInputObject
      RoleWhereUniqueInput: RoleWhereUniqueInputInputObject
      TypeWhereUniqueInput: TypeWhereUniqueInputInputObject
      UserCreateInput: UserCreateInputInputObject
      RoleCreateOneWithoutUsersInput: RoleCreateOneWithoutUsersInputInputObject
      RoleCreateWithoutUsersInput: RoleCreateWithoutUsersInputInputObject
      PostCreateManyWithoutAuthorInput: PostCreateManyWithoutAuthorInputInputObject
      PostCreateWithoutAuthorInput: PostCreateWithoutAuthorInputInputObject
      TypeCreateOneWithoutPostsInput: TypeCreateOneWithoutPostsInputInputObject
      TypeCreateWithoutPostsInput: TypeCreateWithoutPostsInputInputObject
      UserUpdateInput: UserUpdateInputInputObject
      RoleUpdateOneRequiredWithoutUsersInput: RoleUpdateOneRequiredWithoutUsersInputInputObject
      RoleUpdateWithoutUsersDataInput: RoleUpdateWithoutUsersDataInputInputObject
      RoleUpsertWithoutUsersInput: RoleUpsertWithoutUsersInputInputObject
      PostUpdateManyWithoutAuthorInput: PostUpdateManyWithoutAuthorInputInputObject
      PostUpdateWithWhereUniqueWithoutAuthorInput: PostUpdateWithWhereUniqueWithoutAuthorInputInputObject
      PostUpdateWithoutAuthorDataInput: PostUpdateWithoutAuthorDataInputInputObject
      TypeUpdateOneRequiredWithoutPostsInput: TypeUpdateOneRequiredWithoutPostsInputInputObject
      TypeUpdateWithoutPostsDataInput: TypeUpdateWithoutPostsDataInputInputObject
      TypeUpsertWithoutPostsInput: TypeUpsertWithoutPostsInputInputObject
      PostUpsertWithWhereUniqueWithoutAuthorInput: PostUpsertWithWhereUniqueWithoutAuthorInputInputObject
      PostScalarWhereInput: PostScalarWhereInputInputObject
      PostUpdateManyWithWhereNestedInput: PostUpdateManyWithWhereNestedInputInputObject
      PostUpdateManyDataInput: PostUpdateManyDataInputInputObject
      UserUpdateManyMutationInput: UserUpdateManyMutationInputInputObject
      PostCreateInput: PostCreateInputInputObject
      UserCreateOneWithoutPostsInput: UserCreateOneWithoutPostsInputInputObject
      UserCreateWithoutPostsInput: UserCreateWithoutPostsInputInputObject
      PostUpdateInput: PostUpdateInputInputObject
      UserUpdateOneWithoutPostsInput: UserUpdateOneWithoutPostsInputInputObject
      UserUpdateWithoutPostsDataInput: UserUpdateWithoutPostsDataInputInputObject
      UserUpsertWithoutPostsInput: UserUpsertWithoutPostsInputInputObject
      PostUpdateManyMutationInput: PostUpdateManyMutationInputInputObject
      RoleCreateInput: RoleCreateInputInputObject
      UserCreateManyWithoutRoleInput: UserCreateManyWithoutRoleInputInputObject
      UserCreateWithoutRoleInput: UserCreateWithoutRoleInputInputObject
      RoleUpdateInput: RoleUpdateInputInputObject
      UserUpdateManyWithoutRoleInput: UserUpdateManyWithoutRoleInputInputObject
      UserUpdateWithWhereUniqueWithoutRoleInput: UserUpdateWithWhereUniqueWithoutRoleInputInputObject
      UserUpdateWithoutRoleDataInput: UserUpdateWithoutRoleDataInputInputObject
      UserUpsertWithWhereUniqueWithoutRoleInput: UserUpsertWithWhereUniqueWithoutRoleInputInputObject
      UserScalarWhereInput: UserScalarWhereInputInputObject
      UserUpdateManyWithWhereNestedInput: UserUpdateManyWithWhereNestedInputInputObject
      UserUpdateManyDataInput: UserUpdateManyDataInputInputObject
      RoleUpdateManyMutationInput: RoleUpdateManyMutationInputInputObject
      TypeCreateInput: TypeCreateInputInputObject
      PostCreateManyWithoutTypeInput: PostCreateManyWithoutTypeInputInputObject
      PostCreateWithoutTypeInput: PostCreateWithoutTypeInputInputObject
      TypeUpdateInput: TypeUpdateInputInputObject
      PostUpdateManyWithoutTypeInput: PostUpdateManyWithoutTypeInputInputObject
      PostUpdateWithWhereUniqueWithoutTypeInput: PostUpdateWithWhereUniqueWithoutTypeInputInputObject
      PostUpdateWithoutTypeDataInput: PostUpdateWithoutTypeDataInputInputObject
      PostUpsertWithWhereUniqueWithoutTypeInput: PostUpsertWithWhereUniqueWithoutTypeInputInputObject
      TypeUpdateManyMutationInput: TypeUpdateManyMutationInputInputObject
      UserSubscriptionWhereInput: UserSubscriptionWhereInputInputObject
      PostSubscriptionWhereInput: PostSubscriptionWhereInputInputObject
      RoleSubscriptionWhereInput: RoleSubscriptionWhereInputInputObject
      TypeSubscriptionWhereInput: TypeSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    UserOrderByInput: UserOrderByInputValues,
    PostOrderByInput: PostOrderByInputValues,
    RoleOrderByInput: RoleOrderByInputValues,
    TypeOrderByInput: TypeOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'user', args?: QueryUserArgs[] | false, alias?: string  } 
  | { name: 'users', args?: QueryUsersArgs[] | false, alias?: string  } 
  | { name: 'usersConnection', args?: QueryUsersConnectionArgs[] | false, alias?: string  } 
  | { name: 'post', args?: QueryPostArgs[] | false, alias?: string  } 
  | { name: 'posts', args?: QueryPostsArgs[] | false, alias?: string  } 
  | { name: 'postsConnection', args?: QueryPostsConnectionArgs[] | false, alias?: string  } 
  | { name: 'role', args?: QueryRoleArgs[] | false, alias?: string  } 
  | { name: 'roles', args?: QueryRolesArgs[] | false, alias?: string  } 
  | { name: 'rolesConnection', args?: QueryRolesConnectionArgs[] | false, alias?: string  } 
  | { name: 'type', args?: QueryTypeArgs[] | false, alias?: string  } 
  | { name: 'types', args?: QueryTypesArgs[] | false, alias?: string  } 
  | { name: 'typesConnection', args?: QueryTypesConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'user'
  | 'users'
  | 'usersConnection'
  | 'post'
  | 'posts'
  | 'postsConnection'
  | 'role'
  | 'roles'
  | 'rolesConnection'
  | 'type'
  | 'types'
  | 'typesConnection'


type QueryUserArgs =
  | 'where'
type QueryUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPostArgs =
  | 'where'
type QueryPostsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPostsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryRoleArgs =
  | 'where'
type QueryRolesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryRolesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTypeArgs =
  | 'where'
type QueryTypesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTypesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  user: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  users: {
    type: 'User'
    args: Record<QueryUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  usersConnection: {
    type: 'UserConnection'
    args: Record<QueryUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserConnection> | prisma.UserConnection
  }
  post: {
    type: 'Post'
    args: Record<QueryPostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: PostWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post | null> | prisma.Post | null
  }
  posts: {
    type: 'Post'
    args: Record<QueryPostsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PostWhereInput | null, orderBy?: prisma.PostOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post[]> | prisma.Post[]
  }
  postsConnection: {
    type: 'PostConnection'
    args: Record<QueryPostsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PostWhereInput | null, orderBy?: prisma.PostOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostConnection> | prisma.PostConnection
  }
  role: {
    type: 'Role'
    args: Record<QueryRoleArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: RoleWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Role | null> | prisma.Role | null
  }
  roles: {
    type: 'Role'
    args: Record<QueryRolesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: RoleWhereInput | null, orderBy?: prisma.RoleOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Role[]> | prisma.Role[]
  }
  rolesConnection: {
    type: 'RoleConnection'
    args: Record<QueryRolesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: RoleWhereInput | null, orderBy?: prisma.RoleOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RoleConnection> | prisma.RoleConnection
  }
  type: {
    type: 'Type'
    args: Record<QueryTypeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: TypeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Type | null> | prisma.Type | null
  }
  types: {
    type: 'Type'
    args: Record<QueryTypesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TypeWhereInput | null, orderBy?: prisma.TypeOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Type[]> | prisma.Type[]
  }
  typesConnection: {
    type: 'TypeConnection'
    args: Record<QueryTypesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TypeWhereInput | null, orderBy?: prisma.TypeOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TypeConnection> | prisma.TypeConnection
  }
}
  

// Types for User

type UserObject =
  | UserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'username', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'role', args?: [] | false, alias?: string  } 
  | { name: 'posts', args?: UserPostsArgs[] | false, alias?: string  } 

type UserFields =
  | 'id'
  | 'username'
  | 'email'
  | 'password'
  | 'createdAt'
  | 'updatedAt'
  | 'role'
  | 'posts'


type UserPostsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface UserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  username: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  role: {
    type: 'Role'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Role> | prisma.Role
  }
  posts: {
    type: 'Post'
    args: Record<UserPostsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: PostWhereInput | null, orderBy?: prisma.PostOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post[]> | prisma.Post[]
  }
}
  

// Types for Role

type RoleObject =
  | RoleFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'desc', args?: [] | false, alias?: string  } 
  | { name: 'nameCN', args?: [] | false, alias?: string  } 
  | { name: 'createAt', args?: [] | false, alias?: string  } 
  | { name: 'updateAt', args?: [] | false, alias?: string  } 
  | { name: 'users', args?: RoleUsersArgs[] | false, alias?: string  } 

type RoleFields =
  | 'id'
  | 'name'
  | 'desc'
  | 'nameCN'
  | 'createAt'
  | 'updateAt'
  | 'users'


type RoleUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface RoleFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  desc: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  nameCN: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updateAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  users: {
    type: 'User'
    args: Record<RoleUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Role">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
}
  

// Types for Post

type PostObject =
  | PostFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'content', args?: [] | false, alias?: string  } 
  | { name: 'public', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'author', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 

type PostFields =
  | 'id'
  | 'title'
  | 'content'
  | 'public'
  | 'createdAt'
  | 'updatedAt'
  | 'author'
  | 'type'



  

export interface PostFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  content: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  public: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  author: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Post">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  type: {
    type: 'Type'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Post">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Type> | prisma.Type
  }
}
  

// Types for Type

type TypeObject =
  | TypeFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'createAt', args?: [] | false, alias?: string  } 
  | { name: 'updateAt', args?: [] | false, alias?: string  } 
  | { name: 'posts', args?: TypePostsArgs[] | false, alias?: string  } 

type TypeFields =
  | 'id'
  | 'name'
  | 'createAt'
  | 'updateAt'
  | 'posts'


type TypePostsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface TypeFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updateAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  posts: {
    type: 'Post'
    args: Record<TypePostsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Type">,
      args: { where?: PostWhereInput | null, orderBy?: prisma.PostOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post[]> | prisma.Post[]
  }
}
  

// Types for UserConnection

type UserConnectionObject =
  | UserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserEdge[]> | prisma.UserEdge[]
  }
  aggregate: {
    type: 'AggregateUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUser> | prisma.AggregateUser
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for UserEdge

type UserEdgeObject =
  | UserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserEdgeFieldDetails {
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUser

type AggregateUserObject =
  | AggregateUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserFields =
  | 'count'



  

export interface AggregateUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PostConnection

type PostConnectionObject =
  | PostConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type PostConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface PostConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'PostEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"PostConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostEdge[]> | prisma.PostEdge[]
  }
  aggregate: {
    type: 'AggregatePost'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregatePost> | prisma.AggregatePost
  }
}
  

// Types for PostEdge

type PostEdgeObject =
  | PostEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type PostEdgeFields =
  | 'node'
  | 'cursor'



  

export interface PostEdgeFieldDetails {
  node: {
    type: 'Post'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post> | prisma.Post
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregatePost

type AggregatePostObject =
  | AggregatePostFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregatePostFields =
  | 'count'



  

export interface AggregatePostFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for RoleConnection

type RoleConnectionObject =
  | RoleConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type RoleConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface RoleConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"RoleConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'RoleEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"RoleConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RoleEdge[]> | prisma.RoleEdge[]
  }
  aggregate: {
    type: 'AggregateRole'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"RoleConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateRole> | prisma.AggregateRole
  }
}
  

// Types for RoleEdge

type RoleEdgeObject =
  | RoleEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type RoleEdgeFields =
  | 'node'
  | 'cursor'



  

export interface RoleEdgeFieldDetails {
  node: {
    type: 'Role'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"RoleEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Role> | prisma.Role
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateRole

type AggregateRoleObject =
  | AggregateRoleFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateRoleFields =
  | 'count'



  

export interface AggregateRoleFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TypeConnection

type TypeConnectionObject =
  | TypeConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type TypeConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface TypeConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TypeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'TypeEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"TypeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TypeEdge[]> | prisma.TypeEdge[]
  }
  aggregate: {
    type: 'AggregateType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TypeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateType> | prisma.AggregateType
  }
}
  

// Types for TypeEdge

type TypeEdgeObject =
  | TypeEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type TypeEdgeFields =
  | 'node'
  | 'cursor'



  

export interface TypeEdgeFieldDetails {
  node: {
    type: 'Type'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TypeEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Type> | prisma.Type
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateType

type AggregateTypeObject =
  | AggregateTypeFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateTypeFields =
  | 'count'



  

export interface AggregateTypeFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createUser', args?: MutationCreateUserArgs[] | false, alias?: string  } 
  | { name: 'updateUser', args?: MutationUpdateUserArgs[] | false, alias?: string  } 
  | { name: 'updateManyUsers', args?: MutationUpdateManyUsersArgs[] | false, alias?: string  } 
  | { name: 'upsertUser', args?: MutationUpsertUserArgs[] | false, alias?: string  } 
  | { name: 'deleteUser', args?: MutationDeleteUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUsers', args?: MutationDeleteManyUsersArgs[] | false, alias?: string  } 
  | { name: 'createPost', args?: MutationCreatePostArgs[] | false, alias?: string  } 
  | { name: 'updatePost', args?: MutationUpdatePostArgs[] | false, alias?: string  } 
  | { name: 'updateManyPosts', args?: MutationUpdateManyPostsArgs[] | false, alias?: string  } 
  | { name: 'upsertPost', args?: MutationUpsertPostArgs[] | false, alias?: string  } 
  | { name: 'deletePost', args?: MutationDeletePostArgs[] | false, alias?: string  } 
  | { name: 'deleteManyPosts', args?: MutationDeleteManyPostsArgs[] | false, alias?: string  } 
  | { name: 'createRole', args?: MutationCreateRoleArgs[] | false, alias?: string  } 
  | { name: 'updateRole', args?: MutationUpdateRoleArgs[] | false, alias?: string  } 
  | { name: 'updateManyRoles', args?: MutationUpdateManyRolesArgs[] | false, alias?: string  } 
  | { name: 'upsertRole', args?: MutationUpsertRoleArgs[] | false, alias?: string  } 
  | { name: 'deleteRole', args?: MutationDeleteRoleArgs[] | false, alias?: string  } 
  | { name: 'deleteManyRoles', args?: MutationDeleteManyRolesArgs[] | false, alias?: string  } 
  | { name: 'createType', args?: MutationCreateTypeArgs[] | false, alias?: string  } 
  | { name: 'updateType', args?: MutationUpdateTypeArgs[] | false, alias?: string  } 
  | { name: 'updateManyTypes', args?: MutationUpdateManyTypesArgs[] | false, alias?: string  } 
  | { name: 'upsertType', args?: MutationUpsertTypeArgs[] | false, alias?: string  } 
  | { name: 'deleteType', args?: MutationDeleteTypeArgs[] | false, alias?: string  } 
  | { name: 'deleteManyTypes', args?: MutationDeleteManyTypesArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createUser'
  | 'updateUser'
  | 'updateManyUsers'
  | 'upsertUser'
  | 'deleteUser'
  | 'deleteManyUsers'
  | 'createPost'
  | 'updatePost'
  | 'updateManyPosts'
  | 'upsertPost'
  | 'deletePost'
  | 'deleteManyPosts'
  | 'createRole'
  | 'updateRole'
  | 'updateManyRoles'
  | 'upsertRole'
  | 'deleteRole'
  | 'deleteManyRoles'
  | 'createType'
  | 'updateType'
  | 'updateManyTypes'
  | 'upsertType'
  | 'deleteType'
  | 'deleteManyTypes'


type MutationCreateUserArgs =
  | 'data'
type MutationUpdateUserArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUsersArgs =
  | 'data'
  | 'where'
type MutationUpsertUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserArgs =
  | 'where'
type MutationDeleteManyUsersArgs =
  | 'where'
type MutationCreatePostArgs =
  | 'data'
type MutationUpdatePostArgs =
  | 'data'
  | 'where'
type MutationUpdateManyPostsArgs =
  | 'data'
  | 'where'
type MutationUpsertPostArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeletePostArgs =
  | 'where'
type MutationDeleteManyPostsArgs =
  | 'where'
type MutationCreateRoleArgs =
  | 'data'
type MutationUpdateRoleArgs =
  | 'data'
  | 'where'
type MutationUpdateManyRolesArgs =
  | 'data'
  | 'where'
type MutationUpsertRoleArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteRoleArgs =
  | 'where'
type MutationDeleteManyRolesArgs =
  | 'where'
type MutationCreateTypeArgs =
  | 'data'
type MutationUpdateTypeArgs =
  | 'data'
  | 'where'
type MutationUpdateManyTypesArgs =
  | 'data'
  | 'where'
type MutationUpsertTypeArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteTypeArgs =
  | 'where'
type MutationDeleteManyTypesArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createUser: {
    type: 'User'
    args: Record<MutationCreateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  updateUser: {
    type: 'User'
    args: Record<MutationUpdateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateInput, where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updateManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateManyMutationInput, where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUser: {
    type: 'User'
    args: Record<MutationUpsertUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  deleteUser: {
    type: 'User'
    args: Record<MutationDeleteUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  deleteManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createPost: {
    type: 'Post'
    args: Record<MutationCreatePostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PostCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post> | prisma.Post
  }
  updatePost: {
    type: 'Post'
    args: Record<MutationUpdatePostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PostUpdateInput, where: PostWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post | null> | prisma.Post | null
  }
  updateManyPosts: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyPostsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PostUpdateManyMutationInput, where?: PostWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertPost: {
    type: 'Post'
    args: Record<MutationUpsertPostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PostWhereUniqueInput, create: PostCreateInput, update: PostUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post> | prisma.Post
  }
  deletePost: {
    type: 'Post'
    args: Record<MutationDeletePostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PostWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post | null> | prisma.Post | null
  }
  deleteManyPosts: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyPostsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: PostWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createRole: {
    type: 'Role'
    args: Record<MutationCreateRoleArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: RoleCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Role> | prisma.Role
  }
  updateRole: {
    type: 'Role'
    args: Record<MutationUpdateRoleArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: RoleUpdateInput, where: RoleWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Role | null> | prisma.Role | null
  }
  updateManyRoles: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyRolesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: RoleUpdateManyMutationInput, where?: RoleWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertRole: {
    type: 'Role'
    args: Record<MutationUpsertRoleArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: RoleWhereUniqueInput, create: RoleCreateInput, update: RoleUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Role> | prisma.Role
  }
  deleteRole: {
    type: 'Role'
    args: Record<MutationDeleteRoleArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: RoleWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Role | null> | prisma.Role | null
  }
  deleteManyRoles: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyRolesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: RoleWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createType: {
    type: 'Type'
    args: Record<MutationCreateTypeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TypeCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Type> | prisma.Type
  }
  updateType: {
    type: 'Type'
    args: Record<MutationUpdateTypeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TypeUpdateInput, where: TypeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Type | null> | prisma.Type | null
  }
  updateManyTypes: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyTypesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TypeUpdateManyMutationInput, where?: TypeWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertType: {
    type: 'Type'
    args: Record<MutationUpsertTypeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TypeWhereUniqueInput, create: TypeCreateInput, update: TypeUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Type> | prisma.Type
  }
  deleteType: {
    type: 'Type'
    args: Record<MutationDeleteTypeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TypeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Type | null> | prisma.Type | null
  }
  deleteManyTypes: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyTypesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: TypeWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'user', args?: SubscriptionUserArgs[] | false, alias?: string  } 
  | { name: 'post', args?: SubscriptionPostArgs[] | false, alias?: string  } 
  | { name: 'role', args?: SubscriptionRoleArgs[] | false, alias?: string  } 
  | { name: 'type', args?: SubscriptionTypeArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'user'
  | 'post'
  | 'role'
  | 'type'


type SubscriptionUserArgs =
  | 'where'
type SubscriptionPostArgs =
  | 'where'
type SubscriptionRoleArgs =
  | 'where'
type SubscriptionTypeArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  user: {
    type: 'UserSubscriptionPayload'
    args: Record<SubscriptionUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserSubscriptionPayload | null> | prisma.UserSubscriptionPayload | null
  }
  post: {
    type: 'PostSubscriptionPayload'
    args: Record<SubscriptionPostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: PostSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostSubscriptionPayload | null> | prisma.PostSubscriptionPayload | null
  }
  role: {
    type: 'RoleSubscriptionPayload'
    args: Record<SubscriptionRoleArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: RoleSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RoleSubscriptionPayload | null> | prisma.RoleSubscriptionPayload | null
  }
  type: {
    type: 'TypeSubscriptionPayload'
    args: Record<SubscriptionTypeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: TypeSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TypeSubscriptionPayload | null> | prisma.TypeSubscriptionPayload | null
  }
}
  

// Types for UserSubscriptionPayload

type UserSubscriptionPayloadObject =
  | UserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPreviousValues | null> | prisma.UserPreviousValues | null
  }
}
  

// Types for UserPreviousValues

type UserPreviousValuesObject =
  | UserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'username', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type UserPreviousValuesFields =
  | 'id'
  | 'username'
  | 'email'
  | 'password'
  | 'createdAt'
  | 'updatedAt'



  

export interface UserPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  username: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PostSubscriptionPayload

type PostSubscriptionPayloadObject =
  | PostSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type PostSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface PostSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Post'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PostSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post | null> | prisma.Post | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'PostPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PostSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostPreviousValues | null> | prisma.PostPreviousValues | null
  }
}
  

// Types for PostPreviousValues

type PostPreviousValuesObject =
  | PostPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'content', args?: [] | false, alias?: string  } 
  | { name: 'public', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type PostPreviousValuesFields =
  | 'id'
  | 'title'
  | 'content'
  | 'public'
  | 'createdAt'
  | 'updatedAt'



  

export interface PostPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  content: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  public: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for RoleSubscriptionPayload

type RoleSubscriptionPayloadObject =
  | RoleSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type RoleSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface RoleSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"RoleSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Role'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"RoleSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Role | null> | prisma.Role | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'RolePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"RoleSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RolePreviousValues | null> | prisma.RolePreviousValues | null
  }
}
  

// Types for RolePreviousValues

type RolePreviousValuesObject =
  | RolePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'desc', args?: [] | false, alias?: string  } 
  | { name: 'nameCN', args?: [] | false, alias?: string  } 
  | { name: 'createAt', args?: [] | false, alias?: string  } 
  | { name: 'updateAt', args?: [] | false, alias?: string  } 

type RolePreviousValuesFields =
  | 'id'
  | 'name'
  | 'desc'
  | 'nameCN'
  | 'createAt'
  | 'updateAt'



  

export interface RolePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  desc: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  nameCN: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updateAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TypeSubscriptionPayload

type TypeSubscriptionPayloadObject =
  | TypeSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type TypeSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface TypeSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TypeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Type'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TypeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Type | null> | prisma.Type | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'TypePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TypeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TypePreviousValues | null> | prisma.TypePreviousValues | null
  }
}
  

// Types for TypePreviousValues

type TypePreviousValuesObject =
  | TypePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'createAt', args?: [] | false, alias?: string  } 
  | { name: 'updateAt', args?: [] | false, alias?: string  } 

type TypePreviousValuesFields =
  | 'id'
  | 'name'
  | 'createAt'
  | 'updateAt'



  

export interface TypePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updateAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  


export interface UserWhereUniqueInput {
  id?: string | null
  username?: string | null
  email?: string | null
}
export type UserWhereUniqueInputInputObject =
  | Extract<keyof UserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'email', alias?: string  } 
  
export interface UserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  username?: string | null
  username_not?: string | null
  username_in?: string[]
  username_not_in?: string[]
  username_lt?: string | null
  username_lte?: string | null
  username_gt?: string | null
  username_gte?: string | null
  username_contains?: string | null
  username_not_contains?: string | null
  username_starts_with?: string | null
  username_not_starts_with?: string | null
  username_ends_with?: string | null
  username_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  password?: string | null
  password_not?: string | null
  password_in?: string[]
  password_not_in?: string[]
  password_lt?: string | null
  password_lte?: string | null
  password_gt?: string | null
  password_gte?: string | null
  password_contains?: string | null
  password_not_contains?: string | null
  password_starts_with?: string | null
  password_not_starts_with?: string | null
  password_ends_with?: string | null
  password_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  role?: RoleWhereInput | null
  posts_every?: PostWhereInput | null
  posts_some?: PostWhereInput | null
  posts_none?: PostWhereInput | null
  AND?: UserWhereInput[]
  OR?: UserWhereInput[]
  NOT?: UserWhereInput[]
}
export type UserWhereInputInputObject =
  | Extract<keyof UserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'username_not', alias?: string  } 
  | { name: 'username_in', alias?: string  } 
  | { name: 'username_not_in', alias?: string  } 
  | { name: 'username_lt', alias?: string  } 
  | { name: 'username_lte', alias?: string  } 
  | { name: 'username_gt', alias?: string  } 
  | { name: 'username_gte', alias?: string  } 
  | { name: 'username_contains', alias?: string  } 
  | { name: 'username_not_contains', alias?: string  } 
  | { name: 'username_starts_with', alias?: string  } 
  | { name: 'username_not_starts_with', alias?: string  } 
  | { name: 'username_ends_with', alias?: string  } 
  | { name: 'username_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'password_not', alias?: string  } 
  | { name: 'password_in', alias?: string  } 
  | { name: 'password_not_in', alias?: string  } 
  | { name: 'password_lt', alias?: string  } 
  | { name: 'password_lte', alias?: string  } 
  | { name: 'password_gt', alias?: string  } 
  | { name: 'password_gte', alias?: string  } 
  | { name: 'password_contains', alias?: string  } 
  | { name: 'password_not_contains', alias?: string  } 
  | { name: 'password_starts_with', alias?: string  } 
  | { name: 'password_not_starts_with', alias?: string  } 
  | { name: 'password_ends_with', alias?: string  } 
  | { name: 'password_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'posts_every', alias?: string  } 
  | { name: 'posts_some', alias?: string  } 
  | { name: 'posts_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface RoleWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  desc?: string | null
  desc_not?: string | null
  desc_in?: string[]
  desc_not_in?: string[]
  desc_lt?: string | null
  desc_lte?: string | null
  desc_gt?: string | null
  desc_gte?: string | null
  desc_contains?: string | null
  desc_not_contains?: string | null
  desc_starts_with?: string | null
  desc_not_starts_with?: string | null
  desc_ends_with?: string | null
  desc_not_ends_with?: string | null
  nameCN?: string | null
  nameCN_not?: string | null
  nameCN_in?: string[]
  nameCN_not_in?: string[]
  nameCN_lt?: string | null
  nameCN_lte?: string | null
  nameCN_gt?: string | null
  nameCN_gte?: string | null
  nameCN_contains?: string | null
  nameCN_not_contains?: string | null
  nameCN_starts_with?: string | null
  nameCN_not_starts_with?: string | null
  nameCN_ends_with?: string | null
  nameCN_not_ends_with?: string | null
  createAt?: string | null
  createAt_not?: string | null
  createAt_in?: string[]
  createAt_not_in?: string[]
  createAt_lt?: string | null
  createAt_lte?: string | null
  createAt_gt?: string | null
  createAt_gte?: string | null
  updateAt?: string | null
  updateAt_not?: string | null
  updateAt_in?: string[]
  updateAt_not_in?: string[]
  updateAt_lt?: string | null
  updateAt_lte?: string | null
  updateAt_gt?: string | null
  updateAt_gte?: string | null
  users_every?: UserWhereInput | null
  users_some?: UserWhereInput | null
  users_none?: UserWhereInput | null
  AND?: RoleWhereInput[]
  OR?: RoleWhereInput[]
  NOT?: RoleWhereInput[]
}
export type RoleWhereInputInputObject =
  | Extract<keyof RoleWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'desc_not', alias?: string  } 
  | { name: 'desc_in', alias?: string  } 
  | { name: 'desc_not_in', alias?: string  } 
  | { name: 'desc_lt', alias?: string  } 
  | { name: 'desc_lte', alias?: string  } 
  | { name: 'desc_gt', alias?: string  } 
  | { name: 'desc_gte', alias?: string  } 
  | { name: 'desc_contains', alias?: string  } 
  | { name: 'desc_not_contains', alias?: string  } 
  | { name: 'desc_starts_with', alias?: string  } 
  | { name: 'desc_not_starts_with', alias?: string  } 
  | { name: 'desc_ends_with', alias?: string  } 
  | { name: 'desc_not_ends_with', alias?: string  } 
  | { name: 'nameCN', alias?: string  } 
  | { name: 'nameCN_not', alias?: string  } 
  | { name: 'nameCN_in', alias?: string  } 
  | { name: 'nameCN_not_in', alias?: string  } 
  | { name: 'nameCN_lt', alias?: string  } 
  | { name: 'nameCN_lte', alias?: string  } 
  | { name: 'nameCN_gt', alias?: string  } 
  | { name: 'nameCN_gte', alias?: string  } 
  | { name: 'nameCN_contains', alias?: string  } 
  | { name: 'nameCN_not_contains', alias?: string  } 
  | { name: 'nameCN_starts_with', alias?: string  } 
  | { name: 'nameCN_not_starts_with', alias?: string  } 
  | { name: 'nameCN_ends_with', alias?: string  } 
  | { name: 'nameCN_not_ends_with', alias?: string  } 
  | { name: 'createAt', alias?: string  } 
  | { name: 'createAt_not', alias?: string  } 
  | { name: 'createAt_in', alias?: string  } 
  | { name: 'createAt_not_in', alias?: string  } 
  | { name: 'createAt_lt', alias?: string  } 
  | { name: 'createAt_lte', alias?: string  } 
  | { name: 'createAt_gt', alias?: string  } 
  | { name: 'createAt_gte', alias?: string  } 
  | { name: 'updateAt', alias?: string  } 
  | { name: 'updateAt_not', alias?: string  } 
  | { name: 'updateAt_in', alias?: string  } 
  | { name: 'updateAt_not_in', alias?: string  } 
  | { name: 'updateAt_lt', alias?: string  } 
  | { name: 'updateAt_lte', alias?: string  } 
  | { name: 'updateAt_gt', alias?: string  } 
  | { name: 'updateAt_gte', alias?: string  } 
  | { name: 'users_every', alias?: string  } 
  | { name: 'users_some', alias?: string  } 
  | { name: 'users_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PostWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  content?: string | null
  content_not?: string | null
  content_in?: string[]
  content_not_in?: string[]
  content_lt?: string | null
  content_lte?: string | null
  content_gt?: string | null
  content_gte?: string | null
  content_contains?: string | null
  content_not_contains?: string | null
  content_starts_with?: string | null
  content_not_starts_with?: string | null
  content_ends_with?: string | null
  content_not_ends_with?: string | null
  public?: boolean | null
  public_not?: boolean | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  author?: UserWhereInput | null
  type?: TypeWhereInput | null
  AND?: PostWhereInput[]
  OR?: PostWhereInput[]
  NOT?: PostWhereInput[]
}
export type PostWhereInputInputObject =
  | Extract<keyof PostWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'content_not', alias?: string  } 
  | { name: 'content_in', alias?: string  } 
  | { name: 'content_not_in', alias?: string  } 
  | { name: 'content_lt', alias?: string  } 
  | { name: 'content_lte', alias?: string  } 
  | { name: 'content_gt', alias?: string  } 
  | { name: 'content_gte', alias?: string  } 
  | { name: 'content_contains', alias?: string  } 
  | { name: 'content_not_contains', alias?: string  } 
  | { name: 'content_starts_with', alias?: string  } 
  | { name: 'content_not_starts_with', alias?: string  } 
  | { name: 'content_ends_with', alias?: string  } 
  | { name: 'content_not_ends_with', alias?: string  } 
  | { name: 'public', alias?: string  } 
  | { name: 'public_not', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TypeWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  createAt?: string | null
  createAt_not?: string | null
  createAt_in?: string[]
  createAt_not_in?: string[]
  createAt_lt?: string | null
  createAt_lte?: string | null
  createAt_gt?: string | null
  createAt_gte?: string | null
  updateAt?: string | null
  updateAt_not?: string | null
  updateAt_in?: string[]
  updateAt_not_in?: string[]
  updateAt_lt?: string | null
  updateAt_lte?: string | null
  updateAt_gt?: string | null
  updateAt_gte?: string | null
  posts_every?: PostWhereInput | null
  posts_some?: PostWhereInput | null
  posts_none?: PostWhereInput | null
  AND?: TypeWhereInput[]
  OR?: TypeWhereInput[]
  NOT?: TypeWhereInput[]
}
export type TypeWhereInputInputObject =
  | Extract<keyof TypeWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'createAt', alias?: string  } 
  | { name: 'createAt_not', alias?: string  } 
  | { name: 'createAt_in', alias?: string  } 
  | { name: 'createAt_not_in', alias?: string  } 
  | { name: 'createAt_lt', alias?: string  } 
  | { name: 'createAt_lte', alias?: string  } 
  | { name: 'createAt_gt', alias?: string  } 
  | { name: 'createAt_gte', alias?: string  } 
  | { name: 'updateAt', alias?: string  } 
  | { name: 'updateAt_not', alias?: string  } 
  | { name: 'updateAt_in', alias?: string  } 
  | { name: 'updateAt_not_in', alias?: string  } 
  | { name: 'updateAt_lt', alias?: string  } 
  | { name: 'updateAt_lte', alias?: string  } 
  | { name: 'updateAt_gt', alias?: string  } 
  | { name: 'updateAt_gte', alias?: string  } 
  | { name: 'posts_every', alias?: string  } 
  | { name: 'posts_some', alias?: string  } 
  | { name: 'posts_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PostWhereUniqueInput {
  id?: string | null
}
export type PostWhereUniqueInputInputObject =
  | Extract<keyof PostWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface RoleWhereUniqueInput {
  id?: string | null
  name?: string | null
  nameCN?: string | null
}
export type RoleWhereUniqueInputInputObject =
  | Extract<keyof RoleWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'nameCN', alias?: string  } 
  
export interface TypeWhereUniqueInput {
  id?: string | null
  name?: string | null
}
export type TypeWhereUniqueInputInputObject =
  | Extract<keyof TypeWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface UserCreateInput {
  id?: string | null
  username?: string
  email?: string
  password?: string
  role?: RoleCreateOneWithoutUsersInput
  posts?: PostCreateManyWithoutAuthorInput | null
}
export type UserCreateInputInputObject =
  | Extract<keyof UserCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'posts', alias?: string  } 
  
export interface RoleCreateOneWithoutUsersInput {
  create?: RoleCreateWithoutUsersInput | null
  connect?: RoleWhereUniqueInput | null
}
export type RoleCreateOneWithoutUsersInputInputObject =
  | Extract<keyof RoleCreateOneWithoutUsersInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface RoleCreateWithoutUsersInput {
  id?: string | null
  name?: string
  desc?: string | null
  nameCN?: string
  createAt?: string
  updateAt?: string
}
export type RoleCreateWithoutUsersInputInputObject =
  | Extract<keyof RoleCreateWithoutUsersInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'nameCN', alias?: string  } 
  | { name: 'createAt', alias?: string  } 
  | { name: 'updateAt', alias?: string  } 
  
export interface PostCreateManyWithoutAuthorInput {
  create?: PostCreateWithoutAuthorInput[]
  connect?: PostWhereUniqueInput[]
}
export type PostCreateManyWithoutAuthorInputInputObject =
  | Extract<keyof PostCreateManyWithoutAuthorInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PostCreateWithoutAuthorInput {
  id?: string | null
  title?: string
  content?: string | null
  public?: boolean | null
  type?: TypeCreateOneWithoutPostsInput
}
export type PostCreateWithoutAuthorInputInputObject =
  | Extract<keyof PostCreateWithoutAuthorInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'public', alias?: string  } 
  | { name: 'type', alias?: string  } 
  
export interface TypeCreateOneWithoutPostsInput {
  create?: TypeCreateWithoutPostsInput | null
  connect?: TypeWhereUniqueInput | null
}
export type TypeCreateOneWithoutPostsInputInputObject =
  | Extract<keyof TypeCreateOneWithoutPostsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TypeCreateWithoutPostsInput {
  id?: string | null
  name?: string
  createAt?: string
  updateAt?: string
}
export type TypeCreateWithoutPostsInputInputObject =
  | Extract<keyof TypeCreateWithoutPostsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'createAt', alias?: string  } 
  | { name: 'updateAt', alias?: string  } 
  
export interface UserUpdateInput {
  username?: string | null
  email?: string | null
  password?: string | null
  role?: RoleUpdateOneRequiredWithoutUsersInput | null
  posts?: PostUpdateManyWithoutAuthorInput | null
}
export type UserUpdateInputInputObject =
  | Extract<keyof UserUpdateInput, string>
  | { name: 'username', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'posts', alias?: string  } 
  
export interface RoleUpdateOneRequiredWithoutUsersInput {
  create?: RoleCreateWithoutUsersInput | null
  update?: RoleUpdateWithoutUsersDataInput | null
  upsert?: RoleUpsertWithoutUsersInput | null
  connect?: RoleWhereUniqueInput | null
}
export type RoleUpdateOneRequiredWithoutUsersInputInputObject =
  | Extract<keyof RoleUpdateOneRequiredWithoutUsersInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface RoleUpdateWithoutUsersDataInput {
  name?: string | null
  desc?: string | null
  nameCN?: string | null
  createAt?: string | null
  updateAt?: string | null
}
export type RoleUpdateWithoutUsersDataInputInputObject =
  | Extract<keyof RoleUpdateWithoutUsersDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'nameCN', alias?: string  } 
  | { name: 'createAt', alias?: string  } 
  | { name: 'updateAt', alias?: string  } 
  
export interface RoleUpsertWithoutUsersInput {
  update?: RoleUpdateWithoutUsersDataInput
  create?: RoleCreateWithoutUsersInput
}
export type RoleUpsertWithoutUsersInputInputObject =
  | Extract<keyof RoleUpsertWithoutUsersInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PostUpdateManyWithoutAuthorInput {
  create?: PostCreateWithoutAuthorInput[]
  delete?: PostWhereUniqueInput[]
  connect?: PostWhereUniqueInput[]
  set?: PostWhereUniqueInput[]
  disconnect?: PostWhereUniqueInput[]
  update?: PostUpdateWithWhereUniqueWithoutAuthorInput[]
  upsert?: PostUpsertWithWhereUniqueWithoutAuthorInput[]
  deleteMany?: PostScalarWhereInput[]
  updateMany?: PostUpdateManyWithWhereNestedInput[]
}
export type PostUpdateManyWithoutAuthorInputInputObject =
  | Extract<keyof PostUpdateManyWithoutAuthorInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface PostUpdateWithWhereUniqueWithoutAuthorInput {
  where?: PostWhereUniqueInput
  data?: PostUpdateWithoutAuthorDataInput
}
export type PostUpdateWithWhereUniqueWithoutAuthorInputInputObject =
  | Extract<keyof PostUpdateWithWhereUniqueWithoutAuthorInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface PostUpdateWithoutAuthorDataInput {
  title?: string | null
  content?: string | null
  public?: boolean | null
  type?: TypeUpdateOneRequiredWithoutPostsInput | null
}
export type PostUpdateWithoutAuthorDataInputInputObject =
  | Extract<keyof PostUpdateWithoutAuthorDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'public', alias?: string  } 
  | { name: 'type', alias?: string  } 
  
export interface TypeUpdateOneRequiredWithoutPostsInput {
  create?: TypeCreateWithoutPostsInput | null
  update?: TypeUpdateWithoutPostsDataInput | null
  upsert?: TypeUpsertWithoutPostsInput | null
  connect?: TypeWhereUniqueInput | null
}
export type TypeUpdateOneRequiredWithoutPostsInputInputObject =
  | Extract<keyof TypeUpdateOneRequiredWithoutPostsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TypeUpdateWithoutPostsDataInput {
  name?: string | null
  createAt?: string | null
  updateAt?: string | null
}
export type TypeUpdateWithoutPostsDataInputInputObject =
  | Extract<keyof TypeUpdateWithoutPostsDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'createAt', alias?: string  } 
  | { name: 'updateAt', alias?: string  } 
  
export interface TypeUpsertWithoutPostsInput {
  update?: TypeUpdateWithoutPostsDataInput
  create?: TypeCreateWithoutPostsInput
}
export type TypeUpsertWithoutPostsInputInputObject =
  | Extract<keyof TypeUpsertWithoutPostsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PostUpsertWithWhereUniqueWithoutAuthorInput {
  where?: PostWhereUniqueInput
  update?: PostUpdateWithoutAuthorDataInput
  create?: PostCreateWithoutAuthorInput
}
export type PostUpsertWithWhereUniqueWithoutAuthorInputInputObject =
  | Extract<keyof PostUpsertWithWhereUniqueWithoutAuthorInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PostScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  content?: string | null
  content_not?: string | null
  content_in?: string[]
  content_not_in?: string[]
  content_lt?: string | null
  content_lte?: string | null
  content_gt?: string | null
  content_gte?: string | null
  content_contains?: string | null
  content_not_contains?: string | null
  content_starts_with?: string | null
  content_not_starts_with?: string | null
  content_ends_with?: string | null
  content_not_ends_with?: string | null
  public?: boolean | null
  public_not?: boolean | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: PostScalarWhereInput[]
  OR?: PostScalarWhereInput[]
  NOT?: PostScalarWhereInput[]
}
export type PostScalarWhereInputInputObject =
  | Extract<keyof PostScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'content_not', alias?: string  } 
  | { name: 'content_in', alias?: string  } 
  | { name: 'content_not_in', alias?: string  } 
  | { name: 'content_lt', alias?: string  } 
  | { name: 'content_lte', alias?: string  } 
  | { name: 'content_gt', alias?: string  } 
  | { name: 'content_gte', alias?: string  } 
  | { name: 'content_contains', alias?: string  } 
  | { name: 'content_not_contains', alias?: string  } 
  | { name: 'content_starts_with', alias?: string  } 
  | { name: 'content_not_starts_with', alias?: string  } 
  | { name: 'content_ends_with', alias?: string  } 
  | { name: 'content_not_ends_with', alias?: string  } 
  | { name: 'public', alias?: string  } 
  | { name: 'public_not', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PostUpdateManyWithWhereNestedInput {
  where?: PostScalarWhereInput
  data?: PostUpdateManyDataInput
}
export type PostUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof PostUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface PostUpdateManyDataInput {
  title?: string | null
  content?: string | null
  public?: boolean | null
}
export type PostUpdateManyDataInputInputObject =
  | Extract<keyof PostUpdateManyDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'public', alias?: string  } 
  
export interface UserUpdateManyMutationInput {
  username?: string | null
  email?: string | null
  password?: string | null
}
export type UserUpdateManyMutationInputInputObject =
  | Extract<keyof UserUpdateManyMutationInput, string>
  | { name: 'username', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  
export interface PostCreateInput {
  id?: string | null
  title?: string
  content?: string | null
  public?: boolean | null
  author?: UserCreateOneWithoutPostsInput | null
  type?: TypeCreateOneWithoutPostsInput
}
export type PostCreateInputInputObject =
  | Extract<keyof PostCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'public', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'type', alias?: string  } 
  
export interface UserCreateOneWithoutPostsInput {
  create?: UserCreateWithoutPostsInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutPostsInputInputObject =
  | Extract<keyof UserCreateOneWithoutPostsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutPostsInput {
  id?: string | null
  username?: string
  email?: string
  password?: string
  role?: RoleCreateOneWithoutUsersInput
}
export type UserCreateWithoutPostsInputInputObject =
  | Extract<keyof UserCreateWithoutPostsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'role', alias?: string  } 
  
export interface PostUpdateInput {
  title?: string | null
  content?: string | null
  public?: boolean | null
  author?: UserUpdateOneWithoutPostsInput | null
  type?: TypeUpdateOneRequiredWithoutPostsInput | null
}
export type PostUpdateInputInputObject =
  | Extract<keyof PostUpdateInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'public', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'type', alias?: string  } 
  
export interface UserUpdateOneWithoutPostsInput {
  create?: UserCreateWithoutPostsInput | null
  update?: UserUpdateWithoutPostsDataInput | null
  upsert?: UserUpsertWithoutPostsInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneWithoutPostsInputInputObject =
  | Extract<keyof UserUpdateOneWithoutPostsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutPostsDataInput {
  username?: string | null
  email?: string | null
  password?: string | null
  role?: RoleUpdateOneRequiredWithoutUsersInput | null
}
export type UserUpdateWithoutPostsDataInputInputObject =
  | Extract<keyof UserUpdateWithoutPostsDataInput, string>
  | { name: 'username', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'role', alias?: string  } 
  
export interface UserUpsertWithoutPostsInput {
  update?: UserUpdateWithoutPostsDataInput
  create?: UserCreateWithoutPostsInput
}
export type UserUpsertWithoutPostsInputInputObject =
  | Extract<keyof UserUpsertWithoutPostsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PostUpdateManyMutationInput {
  title?: string | null
  content?: string | null
  public?: boolean | null
}
export type PostUpdateManyMutationInputInputObject =
  | Extract<keyof PostUpdateManyMutationInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'public', alias?: string  } 
  
export interface RoleCreateInput {
  id?: string | null
  name?: string
  desc?: string | null
  nameCN?: string
  createAt?: string
  updateAt?: string
  users?: UserCreateManyWithoutRoleInput | null
}
export type RoleCreateInputInputObject =
  | Extract<keyof RoleCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'nameCN', alias?: string  } 
  | { name: 'createAt', alias?: string  } 
  | { name: 'updateAt', alias?: string  } 
  | { name: 'users', alias?: string  } 
  
export interface UserCreateManyWithoutRoleInput {
  create?: UserCreateWithoutRoleInput[]
  connect?: UserWhereUniqueInput[]
}
export type UserCreateManyWithoutRoleInputInputObject =
  | Extract<keyof UserCreateManyWithoutRoleInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutRoleInput {
  id?: string | null
  username?: string
  email?: string
  password?: string
  posts?: PostCreateManyWithoutAuthorInput | null
}
export type UserCreateWithoutRoleInputInputObject =
  | Extract<keyof UserCreateWithoutRoleInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'posts', alias?: string  } 
  
export interface RoleUpdateInput {
  name?: string | null
  desc?: string | null
  nameCN?: string | null
  createAt?: string | null
  updateAt?: string | null
  users?: UserUpdateManyWithoutRoleInput | null
}
export type RoleUpdateInputInputObject =
  | Extract<keyof RoleUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'nameCN', alias?: string  } 
  | { name: 'createAt', alias?: string  } 
  | { name: 'updateAt', alias?: string  } 
  | { name: 'users', alias?: string  } 
  
export interface UserUpdateManyWithoutRoleInput {
  create?: UserCreateWithoutRoleInput[]
  delete?: UserWhereUniqueInput[]
  connect?: UserWhereUniqueInput[]
  set?: UserWhereUniqueInput[]
  disconnect?: UserWhereUniqueInput[]
  update?: UserUpdateWithWhereUniqueWithoutRoleInput[]
  upsert?: UserUpsertWithWhereUniqueWithoutRoleInput[]
  deleteMany?: UserScalarWhereInput[]
  updateMany?: UserUpdateManyWithWhereNestedInput[]
}
export type UserUpdateManyWithoutRoleInputInputObject =
  | Extract<keyof UserUpdateManyWithoutRoleInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface UserUpdateWithWhereUniqueWithoutRoleInput {
  where?: UserWhereUniqueInput
  data?: UserUpdateWithoutRoleDataInput
}
export type UserUpdateWithWhereUniqueWithoutRoleInputInputObject =
  | Extract<keyof UserUpdateWithWhereUniqueWithoutRoleInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface UserUpdateWithoutRoleDataInput {
  username?: string | null
  email?: string | null
  password?: string | null
  posts?: PostUpdateManyWithoutAuthorInput | null
}
export type UserUpdateWithoutRoleDataInputInputObject =
  | Extract<keyof UserUpdateWithoutRoleDataInput, string>
  | { name: 'username', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'posts', alias?: string  } 
  
export interface UserUpsertWithWhereUniqueWithoutRoleInput {
  where?: UserWhereUniqueInput
  update?: UserUpdateWithoutRoleDataInput
  create?: UserCreateWithoutRoleInput
}
export type UserUpsertWithWhereUniqueWithoutRoleInputInputObject =
  | Extract<keyof UserUpsertWithWhereUniqueWithoutRoleInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  username?: string | null
  username_not?: string | null
  username_in?: string[]
  username_not_in?: string[]
  username_lt?: string | null
  username_lte?: string | null
  username_gt?: string | null
  username_gte?: string | null
  username_contains?: string | null
  username_not_contains?: string | null
  username_starts_with?: string | null
  username_not_starts_with?: string | null
  username_ends_with?: string | null
  username_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  password?: string | null
  password_not?: string | null
  password_in?: string[]
  password_not_in?: string[]
  password_lt?: string | null
  password_lte?: string | null
  password_gt?: string | null
  password_gte?: string | null
  password_contains?: string | null
  password_not_contains?: string | null
  password_starts_with?: string | null
  password_not_starts_with?: string | null
  password_ends_with?: string | null
  password_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: UserScalarWhereInput[]
  OR?: UserScalarWhereInput[]
  NOT?: UserScalarWhereInput[]
}
export type UserScalarWhereInputInputObject =
  | Extract<keyof UserScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'username_not', alias?: string  } 
  | { name: 'username_in', alias?: string  } 
  | { name: 'username_not_in', alias?: string  } 
  | { name: 'username_lt', alias?: string  } 
  | { name: 'username_lte', alias?: string  } 
  | { name: 'username_gt', alias?: string  } 
  | { name: 'username_gte', alias?: string  } 
  | { name: 'username_contains', alias?: string  } 
  | { name: 'username_not_contains', alias?: string  } 
  | { name: 'username_starts_with', alias?: string  } 
  | { name: 'username_not_starts_with', alias?: string  } 
  | { name: 'username_ends_with', alias?: string  } 
  | { name: 'username_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'password_not', alias?: string  } 
  | { name: 'password_in', alias?: string  } 
  | { name: 'password_not_in', alias?: string  } 
  | { name: 'password_lt', alias?: string  } 
  | { name: 'password_lte', alias?: string  } 
  | { name: 'password_gt', alias?: string  } 
  | { name: 'password_gte', alias?: string  } 
  | { name: 'password_contains', alias?: string  } 
  | { name: 'password_not_contains', alias?: string  } 
  | { name: 'password_starts_with', alias?: string  } 
  | { name: 'password_not_starts_with', alias?: string  } 
  | { name: 'password_ends_with', alias?: string  } 
  | { name: 'password_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserUpdateManyWithWhereNestedInput {
  where?: UserScalarWhereInput
  data?: UserUpdateManyDataInput
}
export type UserUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof UserUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface UserUpdateManyDataInput {
  username?: string | null
  email?: string | null
  password?: string | null
}
export type UserUpdateManyDataInputInputObject =
  | Extract<keyof UserUpdateManyDataInput, string>
  | { name: 'username', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  
export interface RoleUpdateManyMutationInput {
  name?: string | null
  desc?: string | null
  nameCN?: string | null
  createAt?: string | null
  updateAt?: string | null
}
export type RoleUpdateManyMutationInputInputObject =
  | Extract<keyof RoleUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'nameCN', alias?: string  } 
  | { name: 'createAt', alias?: string  } 
  | { name: 'updateAt', alias?: string  } 
  
export interface TypeCreateInput {
  id?: string | null
  name?: string
  createAt?: string
  updateAt?: string
  posts?: PostCreateManyWithoutTypeInput | null
}
export type TypeCreateInputInputObject =
  | Extract<keyof TypeCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'createAt', alias?: string  } 
  | { name: 'updateAt', alias?: string  } 
  | { name: 'posts', alias?: string  } 
  
export interface PostCreateManyWithoutTypeInput {
  create?: PostCreateWithoutTypeInput[]
  connect?: PostWhereUniqueInput[]
}
export type PostCreateManyWithoutTypeInputInputObject =
  | Extract<keyof PostCreateManyWithoutTypeInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PostCreateWithoutTypeInput {
  id?: string | null
  title?: string
  content?: string | null
  public?: boolean | null
  author?: UserCreateOneWithoutPostsInput | null
}
export type PostCreateWithoutTypeInputInputObject =
  | Extract<keyof PostCreateWithoutTypeInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'public', alias?: string  } 
  | { name: 'author', alias?: string  } 
  
export interface TypeUpdateInput {
  name?: string | null
  createAt?: string | null
  updateAt?: string | null
  posts?: PostUpdateManyWithoutTypeInput | null
}
export type TypeUpdateInputInputObject =
  | Extract<keyof TypeUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'createAt', alias?: string  } 
  | { name: 'updateAt', alias?: string  } 
  | { name: 'posts', alias?: string  } 
  
export interface PostUpdateManyWithoutTypeInput {
  create?: PostCreateWithoutTypeInput[]
  delete?: PostWhereUniqueInput[]
  connect?: PostWhereUniqueInput[]
  set?: PostWhereUniqueInput[]
  disconnect?: PostWhereUniqueInput[]
  update?: PostUpdateWithWhereUniqueWithoutTypeInput[]
  upsert?: PostUpsertWithWhereUniqueWithoutTypeInput[]
  deleteMany?: PostScalarWhereInput[]
  updateMany?: PostUpdateManyWithWhereNestedInput[]
}
export type PostUpdateManyWithoutTypeInputInputObject =
  | Extract<keyof PostUpdateManyWithoutTypeInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface PostUpdateWithWhereUniqueWithoutTypeInput {
  where?: PostWhereUniqueInput
  data?: PostUpdateWithoutTypeDataInput
}
export type PostUpdateWithWhereUniqueWithoutTypeInputInputObject =
  | Extract<keyof PostUpdateWithWhereUniqueWithoutTypeInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface PostUpdateWithoutTypeDataInput {
  title?: string | null
  content?: string | null
  public?: boolean | null
  author?: UserUpdateOneWithoutPostsInput | null
}
export type PostUpdateWithoutTypeDataInputInputObject =
  | Extract<keyof PostUpdateWithoutTypeDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'public', alias?: string  } 
  | { name: 'author', alias?: string  } 
  
export interface PostUpsertWithWhereUniqueWithoutTypeInput {
  where?: PostWhereUniqueInput
  update?: PostUpdateWithoutTypeDataInput
  create?: PostCreateWithoutTypeInput
}
export type PostUpsertWithWhereUniqueWithoutTypeInputInputObject =
  | Extract<keyof PostUpsertWithWhereUniqueWithoutTypeInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface TypeUpdateManyMutationInput {
  name?: string | null
  createAt?: string | null
  updateAt?: string | null
}
export type TypeUpdateManyMutationInputInputObject =
  | Extract<keyof TypeUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'createAt', alias?: string  } 
  | { name: 'updateAt', alias?: string  } 
  
export interface UserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserWhereInput | null
  AND?: UserSubscriptionWhereInput[]
  OR?: UserSubscriptionWhereInput[]
  NOT?: UserSubscriptionWhereInput[]
}
export type UserSubscriptionWhereInputInputObject =
  | Extract<keyof UserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PostSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: PostWhereInput | null
  AND?: PostSubscriptionWhereInput[]
  OR?: PostSubscriptionWhereInput[]
  NOT?: PostSubscriptionWhereInput[]
}
export type PostSubscriptionWhereInputInputObject =
  | Extract<keyof PostSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface RoleSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: RoleWhereInput | null
  AND?: RoleSubscriptionWhereInput[]
  OR?: RoleSubscriptionWhereInput[]
  NOT?: RoleSubscriptionWhereInput[]
}
export type RoleSubscriptionWhereInputInputObject =
  | Extract<keyof RoleSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TypeSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: TypeWhereInput | null
  AND?: TypeSubscriptionWhereInput[]
  OR?: TypeSubscriptionWhereInput[]
  NOT?: TypeSubscriptionWhereInput[]
}
export type TypeSubscriptionWhereInputInputObject =
  | Extract<keyof TypeSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type UserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'username_ASC'
  | 'username_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'password_ASC'
  | 'password_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type PostOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'content_ASC'
  | 'content_DESC'
  | 'public_ASC'
  | 'public_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type RoleOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'desc_ASC'
  | 'desc_DESC'
  | 'nameCN_ASC'
  | 'nameCN_DESC'
  | 'createAt_ASC'
  | 'createAt_DESC'
  | 'updateAt_ASC'
  | 'updateAt_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type TypeOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createAt_ASC'
  | 'createAt_DESC'
  | 'updateAt_ASC'
  | 'updateAt_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  